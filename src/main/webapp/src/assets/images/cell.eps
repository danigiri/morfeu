%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 87.000000 70.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 70 57
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 70 57
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /E put
dup 35 /L put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/C 1 def
/E 2 def
/L 3 def
/uni2B90 4 def
/uni2B91 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4258367 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C96AC05D8620AE2086072F250ADD3256490B02A185DDD3083C39A0A31F6E9B7945802A8663482703ECF28F0C85C7841F9019F9AB35B15960043CE4F99558274C4E4C5D35B36F092CEDBC42463C78A54D8577D6DC793827D13C75A0EF33D3ED2CDC3788EBC1C0E48C876AEE70FC1754E44F6191F212852DBAE4BA4D05C7707D9193F486EB6417CE3D5B7381176906217915B5A2CEF848A4AC7AC952A7E4D7A119FDBB1DB081A9BD017D7D90BED918A528A8466C83904F9A9E3F01F569123E574A478D1804823D836C76590C20F9D45E30C88D98C2ADFEA7A2B3A383198F1EDD18A8DEADE6CEF47BD333B1DF20260C5CAF81069158A14397B36980375C7AB608677CB8A8864FE21348348E9B161B26F2716F477F89BF155C3FD7CEF380D0216AFF36B2C180FAFD7FB460265DC416DEDE1B59B3975C886C00B8FF2FE1F30194E3006EE46FFB430F2B2E1C3577DDD79533CD7B2DC39FD9E04E39C6D76324EFDAB3991F1225315A45A094FCEF7BEBCBD34A4BEABCC65083CE270A418EB47808CD36D924E1B7DEAD7424B932FFDECC9E5C31EF993C973548E44D6C07AEDC5DCBE6BB2776D436957EB4D57064AD3085E00658A4C7B092A434DD33EF52F06DC81D9D705D34C9234A4A038DE7C87251B9792296DBA62A9D4E40FDC2407C7313B623C33777D9E6E774E0A35183AD8C28AD328B73C17CC60E1C01438FE079FA18C8C1F1F7290095109C6CE3BB8AAFA24C7F7D1C6AEFB9EBAEA9F223C99241255985A6AAE9C67A2
3E74BE576C42F988DB4DBBF32784474D980BB688810D3EF8C2E48343A0DE75A5D52EC572DDE834BF0002882CEB9A5CD6D0EADF67CC2993EBAD64CEA0B581271EA4D66798258C40CE51A01A70245FD92402444878F8AF2100D556B510178EE85F00DBDF69F0945DF62564C4C13CC20CC73C49C6EE9FEB0E4E7194C4CC55BBF6533C1EFD226015E01534D69BF0310DC108F8F2189661BA364B78E74DDA2E372124FE3CB2DFCAE6BF86B423F2986217AA8B2433DE2BD087B91831129C25
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
q
0 0 69.599998 56 rc
76 0 0 62 -3 -5 cm
BI
/Width 228
/Height 186
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#\c;I(q#,dAg\cX#Jc)DCq#1!e
_Z.1Hq#:'eJc+:#Jc()sVYp5fq#8/1\c;I(q#,dAg\cX#Jc)DCq#1!e_Z.gZq"XXOpuD/*J_]#8J_Yh3
VVLt&pu;)9q"WA=bQ%A4q!Ik:pt^MVgY@A8J_[-Xptb`)q!IkOeGm_lq"XXOpuD/*J_]#8J_Yh3VVLt&
pu;)9q"WA=eGo=9ps/Z3pm1]=JWecNJWbSIVNU_<pm(WMpriI'h>c")q"4@,pnmhPplg8lgQI,NJWcmn
plkK<pn[].q"!8@eGo=9ps/Z3pm1]=JWecNJWbSIVNU_<pm(WMpriI'h>c=2q"a^2pmLo3pk"'IdXZn!
JUj;Apk&9ppm:curqHEej8[s8q"a^2pmLo3pk"'IdXZn!JUj;Apk&9ppm:curqHEej8[s8q"a^2pmLo3
pk"'IdXZn!JUj;Apk&9ppm:curqHEej8[s8q!RpTpkJ6gJUl1!JUi<%SUg0[pkAL;rp9XQj8[s8q!RpT
pkJ6gJUl1!JUi<%SUg0[pkAL;rp9XQj8[s8q!RpTpkJ6gJUl1!JUi<%SUg0[pkAL;rp9XQj8\9Aq#:'M
pm:c-pjn!HaaeqmJUiu8mt(8!ro!e<j8\9Aq#:'Mpm:c-pjn!HaaeqmJUiu8mt(8!ro!e<j8\9Aq#:'M
pm:c-pjn!HaaeqmJUiu8mt(8!ro!e<j8\9Aq#1!Fplp>[[t'$[JUi?&plbX0rnui:k5Y5Tpttk2JUk4[
JUi<%Jq3WZrn7;/j8\9Aq#1!Fplp>[[t'$[JUi?&plbX0rnui:k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-
j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z
[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/
rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0
JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZ
rn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!E
plg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&
plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5T
ptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%
Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9A
q#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[
JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9
k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[
JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-
j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z
[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/
rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0
JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZ
rn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!E
plg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&
plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5T
ptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%
Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9A
q#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[
JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9
k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[
JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-
j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z
[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/
rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0
JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZ
rn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!E
plg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&
plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5T
ptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%
Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9A
q#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[
JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9
k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[
JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-
j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z
[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/
rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0
JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZ
rn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!E
plg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&
plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5T
ptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%
Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9A
q#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[
JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9
k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[
JUi<%Jq3WZrn.5-j8\9Aq#1!Eplg8Z[t'$[JUi?&plbX/rnlc9k5Y5Tptke0JUk4[JUi<%Jq3WZrn.5-
j8\9Aq#1!Fplp>[[t'$[JUi?&plbX0rnui:k5Y5Tpttk2JUk4[JUi<%Jq3WZrn7;/j8\9Aq#1!Fplp>[
[t'$[JUi?&plbX0rnui:k5Y5Upu;(6pjn!H^jpudJUiZ/pjr4(rnRM5j8\9Aq#:'Jpm(W*JUkOdJUi<%
Mh(SRplk^4ro<&=k5Y5Upu;(6pjn!H^jpudJUiZ/pjr4(rnRM5j8[s8q!7^Hpk+-J^jpudJUiu8pjr3m
pm_9Grp/VEh>d99pn%85JUkOdJUi<%P^rO[pk/@2roa:Hj8[s8q!7^Hpk+-J^jpudJUiu8pjr3mpm_9G
rp/VEh>d9Bpq?H_pk"'IaaeqmJUiu8pk&:#ppg=prq5=Oh>d9Bpq?H_pk"'IaaeqmJUiu8pk&:#ppg=p
rq5=Oh>d9Bpq?H_pk"'IaaeqmJUiu8pk&:#ppg=prq5=OJcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$
JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$
JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#
JcC<$JcC<$JcF:#JcC<$JcC<$JcF:#J,
~> %APLeod
EI
/Cs2 SC
0.90196079 0.90196079 0.90196079 sc
CM
5.2535429 53.977955 m
64.617325 53.977955 l
66.384636 53.977955 67.817322 52.545265 67.817322 50.777954 c
67.817322 5.020473 l
67.817322 3.2531619 66.384636 1.8204731 64.617325 1.8204731 c
5.2535429 1.8204731 l
3.4862316 1.8204731 2.0535426 3.2531619 2.0535426 5.020473 c
2.0535426 50.777954 l
2.0535426 52.545265 3.4862316 53.977955 5.2535429 53.977955 c
h
5.2535429 53.977955 m
f
2 w
1 J
1 j
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -113.6 101.6 cm
148.56693 59.527557 m
222.77165 59.527557 l
224.98079 59.527557 226.77165 61.31842 226.77165 63.527557 c
226.77165 120.72441 l
226.77165 122.93355 224.98079 124.72441 222.77165 124.72441 c
148.56693 124.72441 l
146.35779 124.72441 144.56693 122.93355 144.56693 120.72441 c
144.56693 63.527557 l
144.56693 61.31842 146.35779 59.527557 148.56693 59.527557 c
h
148.56693 59.527557 m
S
/Cs3 SC
0 sc
0 i
0.80000001 0 0 -0.80000001 34.935432 27.899214 cm
/F1.1[ 16 0 0 -16 0 0]sf
-20.6 6.2679443 m
(!"##)[ 11.856000 10.368000 9.488000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
