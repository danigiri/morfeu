{{i}}<{{cellmodel.name}}
			{%- for a in list(cellmodel.metadata.getAttributesFor(case).iterator) %} {{a-}}{%- endfor -%}
			{#- we check if we have key-value attributes or normal ones, in the case of k:v, we skip verification of the key -#}
			{%- if cellmodel.metadata.getDirectivesFor(case).contains('KEY-VALUE') %} {{cellmodel.metadata.identifier.get}}={{quote(yaml.getKey) -}}
				{%- for a in cellmodel.asComplex.attributes.asList %}{% if a.name!=(cellmodel.metadata.identifier.get()) %} {{a.name}}={{quote(yaml.getValue)}}{% endif %}{%- endfor -%}
			{%- else -%}
				{%- for a in cellmodel.asComplex.attributes.asList %} {%- if yaml.has(a.name)%} {{a.name}}={{quote(yaml.get(a.name))}}{% endif %}{%- endfor -%}
			{%- endif -%}
			{%- if cellmodel.asComplex.children.size()>0 -%}
				>{% for y in list(yaml.fieldNames) -%} {#- THIS LOOKS LIKE THE CODE ABOVE FOR ONE CELL, WE CAN DO AN INCLUDE OF GIVEN ONE CM + FIELD NAMES, WE MATCH -#} 
					{%- for child in cellmodel.asComplex.children.asList -%}
						{%- if child.metadata.getDirectivesFor(case).contains('LISTS-NO-PLURAL') -%}
							{%- set matchname = child.name -%}
						{%- else -%}
							{%- set matchname = concat(child.name, 's') -%}
						{%- endif -%}
						{%- if y==matchname -%}
							{#- Matched a field in the yaml and a child in the model, we have a match -#}
							{%- set found = true -%}
							{%- include 'cell-yaml-to-xml.dtwig' with {'yaml': yaml.get(matchname), 'cellmodels':[child], 'i':i, 'case': case} only -%}
						{%- endif -%}
					{%- endfor -%}
				{%- endfor %}
{{i}}</{{cellmodel.name}}>
			{%- else -%}
				/>
			{%- endif %}