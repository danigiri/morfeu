$#- ___________ variable handling _________ -#$
$( if v -)$
	$(- set yaml = v.yaml -)$
	$(- set cellmodels = v.cellmodels -)$
	$(- set case = v.case -)$
	$(- set i = v.i -)$
$(- endif -)$
$(- if yaml.isObject -)$
	$#- ___________ yaml is object _________ -#$

	$(- if cellmodels.size()>1 -)$
		$#- We try to find a matching cell model -#$
	
		$(- for c in cellmodels -)$
			$(- if c.metadata.getDirectivesFor(case).contains('ATTRIBUTES-ONLY') -)$
				$#- match by attributes or children -#$
				$(- for a in c.asComplex.attributes.asList -)$ 
				$(- if yaml.has(a.name) -)$
					$(- set found = true -)$
					$(- include 'content-yaml-to-xml.twig' with {'yaml': yaml, 'cellmodels':[c], 'i':i, 'case': case} only -)$
				$(- endif -)$
				$(- endfor -)$
				$(- if not found -)$
					$(- for child in cm.asComplex.children.asList -)$
						$(- if child.metadata.getDirectivesFor(case).contains('LISTS-NO-PLURAL') -)$
							$(- set matchname = child.name -)$
						$(- else -)$
							$(- set matchname = concat(child.name, 's') -)$
						$(- endif -)$
						$(- if yaml.has(matchname) -)$
							$#- Matched a field in the yaml and an attribute, we assume we have a match -#$
							$(- set found = true -)$
							$(- include 'content-yaml-to-xml.twig' with {'yaml': yaml.get(matchname), 'cellmodels':[child], 'i':i, 'case': case} only -)$
						$(- endif -)$
					$(- endfor -)$
				$( endif )$
			$(- else -)$
				$#- match by name -#$
				MATCH BY NAME
			$( endif -)$
		$(- endfor -)$
	
	
	$(- else -)$
		$#- cellmodels.size()==1 - We are already matched to a cell model, we start printing -#$
	
		$(- if cellmodels[0].isSimple -)$
$[i]$<$[cellmodels[0].name]$>$[yaml.asText]$</$[cellmodels[0].name]$>
$(else)$	$#- complex #$
$[i]$<$[cellmodels[0].name]$
			$(- for a in list(cellmodels[0].metadata.getAttributesFor(case).iterator) )$ $[a-]$$(- endfor -)$
			$(- for a in cellmodels[0].asComplex.attributes.asList )$ $(- if yaml.has(a.name))$ $[a.name]$=$[quote(yaml.get(a.name))]$$(endif)$$(- endfor -)$
			$(- if cellmodels[0].asComplex.children.size()>0 -)$
				>$( for y in list(yaml.fieldNames) -)$ $#- THIS LOOKS LIKE THE CODE ABOVE FOR ONE CELL, WE CAN DO AN INCLUDE OF GIVEN ONE CM + FIELD NAMES, WE MATCH -#$ 
					$(- for child in cellmodels[0].asComplex.children.asList -)$
						$(- if child.metadata.getDirectivesFor(case).contains('LISTS-NO-PLURAL') -)$
							$(- set matchname = child.name -)$
						$(- else -)$
							$(- set matchname = concat(child.name, 's') -)$
						$(- endif -)$
						$(- if y==matchname -)$
							$#- Matched a field in the yaml and a child in the model, we have a match -#$
							$(- set found = true -)$
							$(- include 'content-yaml-to-xml.twig' with {'yaml': yaml.get(matchname), 'cellmodels':[child], 'i':i, 'case': case} only -)$
						$(- endif -)$
					$(- endfor -)$
				$(- endfor )$
$[i]$</$[cellmodels[0].name]$>
			$(- else -)$
				/>
			$(- endif )$
		$(- endif -)$

	$(- endif -)$ $#- size -#$

$(- elseif yaml.isTextual -)$
	$#- ___________ yaml is a simple text node _________ -#$
$[i]$<$[cellmodels[0].name]$>$[yaml.asText]$</$[cellmodels[0].name]$>
$( elseif yaml.isArray -)$
	$#- ___________ yaml is array _________ -#$

	$(- for y in range(yaml.size()) -)$
$( include 'content-yaml-to-xml.twig' with {'yaml': yaml.get(y), 'cellmodels':cellmodels, 'i':concat(i,'\t'), 'case': case} only -)$
	$(- endfor -)$

$(- endif -)$
